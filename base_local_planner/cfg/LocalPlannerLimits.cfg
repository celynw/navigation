#! /usr/bin/env python
# Generic Local Planner configuration

PACKAGE='base_local_planner'
import roslib; roslib.load_manifest(PACKAGE)

import sys

from dynamic_reconfigure.parameter_generator import *

gen = ParameterGenerator()

# velocities
gen.add("max_trans_vel", double_t, 0, "The absolute value of the maximum translational velocity for the robot in m/s", 0.55, 0)
gen.add("min_trans_vel", double_t, 0, "The absolute value of the minimum translational velocity for the robot in m/s", 0.1, 0)

gen.add("max_vel_x", double_t, 0, "The maximum x velocity for the robot in m/s", 0.55)
gen.add("min_vel_x", double_t, 0, "The minimum x velocity for the robot in m/s", 0.0)

gen.add("max_vel_y", double_t, 0, "The maximum y velocity for the robot in m/s", 0.1)
gen.add("min_vel_y", double_t, 0, "The minimum y velocity for the robot in m/s", -0.1)

gen.add("max_rot_vel", double_t, 0, "The absolute value of the maximum rotational velocity for the robot in rad/s",  1.0, 0)
gen.add("min_rot_vel", double_t, 0, "The absolute value of the minimum rotational velocity for the robot in rad/s", 0.4, 0)

# acceleration
gen.add("acc_lim_x", double_t, 0, "The acceleration limit of the robot in the x direction", 1.0, 0, 20.0)
gen.add("acc_lim_y", double_t, 0, "The acceleration limit of the robot in the y direction", 1.0, 0, 20.0)
gen.add("acc_lim_theta", double_t, 0, "The acceleration limit of the robot in the theta direction", 1.0, 0, 20.0)
gen.add("acc_limit_trans", double_t, 0, "The absolute value of the maximum translational acceleration for the robot in m/s^2", 0.1, 0)

# jerk
gen.add("jerk_lim_trans", double_t, 0, "The absolute value of the maximum translational jerk for the robot in m/s^3", 0.1, 0)
gen.add("jerk_lim_rot", double_t, 0, "The absolute value of the maximum rotational jerk for the robot in m/s^3", 0.1, 0)

gen.add("prune_plan", bool_t,0, "Start following closest point of global plan, not first point (if different).", False)

gen.add("xy_goal_tolerance", double_t, 0, "Within what maximum distance we consider the robot to be in goal", 0.1)
gen.add("yaw_goal_tolerance", double_t, 0, "Within what maximum angle difference we consider the robot to face goal direction", 0.1)

gen.add("trans_stopped_vel", double_t, 0, "Below what maximum velocity we consider the robot to be stopped in translation", 0.1)
gen.add("rot_stopped_vel", double_t, 0, "Below what maximum rotation velocity we consider the robot to be stopped in rotation", 0.1)

# gen.add("vx_samples", int_t, 0, "The number of samples to use when exploring the x velocity space", 3, 1)
# gen.add("vy_samples", int_t, 0, "The number of samples to use when exploring the y velocity space", 10, 1)
# gen.add("vth_samples", int_t, 0, "The number of samples to use when exploring the theta velocity space", 20, 1)

# gen.add("penalize_negative_x", bool_t, 0, "Whether to penalize trajectories that have negative x velocities.", True)

gen.add("restore_defaults", bool_t,0, "Restore to the original configuration.", False)

exit(gen.generate(PACKAGE, "base_local_planner", "LocalPlannerLimits"))
